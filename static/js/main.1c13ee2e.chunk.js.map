{"version":3,"sources":["pages/bikes.js","pages/home.js","pages/map.js","components/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["Styles","styled","div","Bikes","useState","bike","setBike","newFilter","setNewFilter","useEffect","fetch","then","res","json","network","stations","BikeItem","bikes","filter","bikeName","name","toLowerCase","includes","map","key","id","free_bikes","empty_slots","Navbar","expand","fixed","Brand","href","Toggle","area-controls","Collapse","Form","inline","FormControl","type","placeholder","className","value","onChange","event","target","console","log","Button","variant","Nav","Link","NavDropdown","title","Item","Divider","Home","Mapper","Map","center","zoom","TileLayer","url","attribution","NavigationBar","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c13ee2e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  Button,\n  Form,\n  FormControl,\n  Nav,\n  Navbar,\n  NavDropdown,\n} from 'react-bootstrap'\nimport styled from 'styled-components'\n\nconst Styles = styled.div`\n  form {\n    width: auto;\n  }\n  button {\n    margin: 1vh;\n  }\n  .navbar {\n    background-color: black;\n  }\n  .navbar-default,\n  .collapsed {\n    border-color: white;\n    background-color: white;\n  }\n  .navbar-default,\n  .toggle {\n    background-color: white;\n  }\n  .navbar-brand,\n  .navbar-nav .nav-link {\n    color: white;\n    margin: 2vh 2vw 2vh 2vw;\n    &:hover {\n      color: #690505;\n    }\n  }\n  .navbar-light .navbar-nav .nav-link {\n    color: white;\n    &:hover {\n      color: #690505;\n    }\n  }\n  .navbar-light .navbar-brand {\n    color: white;\n    &:hover {\n      color: #690505;\n    }\n  }\n  .dropdown {\n    color: black;\n    &:hover {\n      color: #690505;\n    }\n  }\n`\n\nexport const Bikes = () => {\n  const [bike, setBike] = useState([])\n  const [newFilter, setNewFilter] = useState('')\n\n  useEffect(() => {\n    fetch('https://api.citybik.es/v2/networks/citybikes-helsinki')\n      .then((res) => res.json())\n      .then((res) => setBike(res.network.stations))\n  }, [])\n\n  // Mapping through the bikelist got from the API and printing them correctly\n  const BikeItem = ({ bikes }) => {\n    const mapBikes = () =>\n      bikes\n        .filter((bikeName) =>\n          bikeName.name.toLowerCase().includes(newFilter.toLowerCase())\n        )\n        .map((bike) => (\n          <tr key={bike.id}>\n            <td>{bike.name}</td>\n            <td>{bike.free_bikes}</td>\n            <td>{bike.empty_slots}</td>\n          </tr>\n        ))\n    return <tbody>{mapBikes()}</tbody>\n  }\n\n  // hHndle user input in search field\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n    console.log(event.target.value)\n  }\n\n  return (\n    <Styles>\n      <Navbar expand=\"lg\" fixed=\"top\">\n        <Navbar.Brand href=\"/\">Bikes</Navbar.Brand>\n        <Navbar.Toggle area-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Form inline>\n            <FormControl\n              type=\"text\"\n              placeholder=\"Search\"\n              className=\"mr-sm-2\"\n              value={newFilter}\n              onChange={handleFilterChange}\n            />\n            <Button variant=\"outline-dark\">Search</Button>\n          </Form>\n          <Nav className=\"ml-auto\">\n            <Nav.Link href=\"#/home\">Home</Nav.Link>\n            <Nav.Link href=\"#/bikes\">Bikes</Nav.Link>\n            <NavDropdown title=\"Maps\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#/maps\">Maps</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"https://benjambo.github.io/portfolio/#/\">\n                Benjambo\n              </NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <div className=\"App\">\n        <h1>Alepa-pyörä Websivusto</h1>\n        <table className=\"tables\">\n          <thead>\n            <tr>\n              <th>Pyöräasema: </th>\n              <th>Saatavilla olevat pyörät: </th>\n              <th>Vapaita paikkoja jäljellä: </th>\n            </tr>\n          </thead>\n          <BikeItem bikes={bike} />\n        </table>\n      </div>\n    </Styles>\n  )\n}\n","import React from 'react'\n\nexport const Home = () => {\n  return (\n    <div className=\"App\">\n      <h1>Welcome to Avoimet Rajapinnat tehtävä page</h1>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\nimport { Icon } from 'leaflet'\n\nexport const Mapper = () => {\n  return (\n    <div className=\"map-container\">\n      <Map center={[60.1733244, 24.9410248]} zoom={12}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n      </Map>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap'\n\nimport styled from 'styled-components'\n\nconst Styles = styled.div`\n  form {\n    width: auto;\n  }\n  button {\n    margin: 1vh;\n  }\n  .navbar {\n    background-color: black;\n  }\n  .navbar-default,\n  .collapsed {\n    border-color: white;\n    background-color: white;\n  }\n  .navbar-default,\n  .toggle {\n    background-color: white;\n  }\n  .navbar-brand,\n  .navbar-nav .nav-link {\n    color: white;\n    margin: 2vh 2vw 2vh 2vw;\n    &:hover {\n      color: #690505;\n    }\n  }\n  .navbar-light .navbar-nav .nav-link {\n    color: white;\n    &:hover {\n      color: #690505;\n    }\n  }\n  .navbar-light .navbar-brand {\n    color: white;\n    &:hover {\n      color: #690505;\n    }\n  }\n  .dropdown {\n    color: black;\n    &:hover {\n      color: #690505;\n    }\n  }\n`\n\nconst NavigationBar = () => {\n  return (\n    <Styles>\n      <Navbar expand=\"lg\" fixed=\"top\">\n        <Navbar.Brand href=\"/\">Bikes</Navbar.Brand>\n        <Navbar.Toggle area-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            <Nav.Link href=\"#/home\">Home</Nav.Link>\n            <Nav.Link href=\"#/bikes\">Bikes</Nav.Link>\n            <NavDropdown title=\"More\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#/maps\">Maps</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"https://benjambo.github.io/portfolio/#/\">\n                Benjambo\n              </NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </Styles>\n  )\n}\nexport default NavigationBar\n","import React from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport './App.css'\n\n// Pages\nimport { Bikes } from './pages/bikes'\nimport { Home } from './pages/home'\nimport { Mapper } from './pages/map'\n\n// Components\nimport NavigationBar from './components/NavigationBar'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nconst App = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavigationBar />\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/home\" component={Home} />\n            <Route path=\"/bikes\" component={Bikes} />\n            <Route path=\"/maps\" component={Mapper} />\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}