{"version":3,"sources":["assets/bikemobile.jpg","pages/bikes.js","pages/home.js","pages/map.js","pages/weather.js","components/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Bikes","useState","bike","setBike","newFilter","setNewFilter","useEffect","fetch","then","res","json","network","stations","BikeItem","bikes","filter","bikeName","name","toLowerCase","includes","map","key","id","free_bikes","empty_slots","handleFilterChange","event","target","value","console","log","className","type","placeholder","onChange","onKeyPress","Home","alt","src","api","Mapper","activeBike","setActiveBike","weather","setWeather","Map","center","zoom","TileLayer","url","attribution","stop","Marker","position","latitude","longitude","onclick","Popup","onClose","Math","round","main","temp","Weather","query","setQuery","evt","result","sys","country","Intl","DateTimeFormat","weekday","year","month","day","hour","minute","format","Styles","styled","div","NavigationBar","Navbar","expand","fixed","Brand","href","Toggle","area-controls","Collapse","Nav","Link","NavDropdown","title","Item","Divider","rel","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,wC,iMCE9BC,EAAQ,WAAO,IAAD,EACDC,mBAAS,IADR,mBAClBC,EADkB,KACZC,EADY,OAESF,mBAAS,IAFlB,mBAElBG,EAFkB,KAEPC,EAFO,KAIzBC,qBAAU,WACRC,MAAM,yDACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAASN,EAAQM,EAAIE,QAAQC,eACpC,IAGH,IAAMC,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAalB,OAAO,+BAXLA,EACGC,QAAO,SAACC,GAAD,OACNA,EAASC,KAAKC,cAAcC,SAASf,EAAUc,kBAEhDE,KAAI,SAAClB,GAAD,OACH,wBAAImB,IAAKnB,EAAKoB,IACZ,4BAAKpB,EAAKe,MACV,4BAAKf,EAAKqB,YACV,4BAAKrB,EAAKsB,mBAOdC,EAAqB,SAACC,GAC1BrB,EAAaqB,EAAMC,OAAOC,OAC1BC,QAAQC,IAAIJ,EAAMC,OAAOC,QAG3B,OACI,yBAAKG,UAAU,SACb,yDACA,yBAAKA,UAAU,cACb,2BACEC,KAAK,OACLD,UAAU,aACVE,YAAY,YACZC,SAAUT,EACVG,MAAOxB,EACP+B,WAAYV,KAGhB,2BAAOM,UAAU,UACf,+BACE,4BACE,8CACA,iDACA,oDAGJ,kBAAClB,EAAD,CAAUC,MAAOZ,O,iBCrDdkC,EAAO,WAClB,OACE,yBAAKL,UAAU,SACb,iDACA,yBAAKA,UAAU,cAAcM,IAAI,iBAAiBC,IAAKpC,Q,gCCJvDqC,EACC,mCADDA,EAEE,2CAGKC,EAAS,WAAO,IAAD,EACFvC,mBAAS,IADP,mBACnBC,EADmB,KACbC,EADa,OAEUF,mBAAS,MAFnB,mBAEnBwC,EAFmB,KAEPC,EAFO,OAIIzC,mBAAS,IAJb,mBAInB0C,EAJmB,KAIVC,EAJU,KAkB1B,OAZAtC,qBAAU,WACRC,MAAM,yDACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAASN,EAAQM,EAAIE,QAAQC,eACpC,IAEHN,qBAAU,WACRC,MAAM,GAAD,OAAIgC,EAAJ,iDAAqDA,IACvD/B,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAASmC,EAAWnC,QAC3B,IAGD,yBAAKsB,UAAU,SACb,yBAAKA,UAAU,iBACb,kBAACc,EAAA,EAAD,CAAKC,OAAQ,CAAC,WAAY,YAAaC,KAAM,IAC3C,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAEbhD,EAAKkB,KAAI,SAAC+B,GAAD,OACR,kBAACC,EAAA,EAAD,CACE/B,IAAK8B,EAAK7B,GACV+B,SAAU,CAACF,EAAKG,SAAUH,EAAKI,WAC/BC,QAAS,WACPd,EAAcS,SAKnBV,GACC,kBAACgB,EAAA,EAAD,CACEpC,IAAKoB,EAAWnB,GAChB+B,SAAU,CAACZ,EAAWa,SAAUb,EAAWc,WAC3CG,QAAS,WACPhB,EAAc,QAGhB,6BACE,4BAAKD,EAAWxB,MAChB,+CAAqBwB,EAAWlB,YAChC,gDAAsBkB,EAAWjB,aACjC,6BACE,uBAAGO,UAAU,QAAb,YACY4B,KAAKC,MAAMjB,EAAQkB,KAAKC,MADpC,QAC6C,IAC1CnB,EAAQA,QAAQ,GAAGkB,aCzDlCtB,EACC,mCADDA,EAEE,2CAGKwB,EAAU,WAAO,IAAD,EACD9D,mBAAS,IADR,mBACpB+D,EADoB,KACbC,EADa,OAEGhE,mBAAS,IAFZ,mBAEpB0C,EAFoB,KAEXC,EAFW,KAmC3B,OACE,yBAAKb,UAAU,SACb,yBACEA,UACyB,oBAAhBY,EAAQkB,KACXlB,EAAQkB,KAAKC,KAAO,GAClB,eACA,eACF,WAGN,8BACE,yBAAK/B,UAAU,cACb,2BACEC,KAAK,OACLD,UAAU,aACVE,YAAY,YACZC,SAtBe,SAACR,GAC1BuC,EAASvC,EAAMC,OAAOC,OACtBC,QAAQC,IAAIJ,EAAMC,OAAOC,QAqBfA,MAAOoC,EACP7B,WAlDG,SAAC+B,GACE,UAAZA,EAAI7C,KACNd,MAAM,GAAD,OAAIgC,EAAJ,qBAAyByB,EAAzB,+BAAqDzB,IACvD/B,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAC2D,GACLvB,EAAWuB,GACXF,EAAS,IACTpC,QAAQC,IAAIqC,UA8CY,oBAAhBxB,EAAQkB,KACd,6BACE,yBAAK9B,UAAU,gBACb,yBAAKA,UAAU,YACZY,EAAQ1B,KADX,KACmB0B,EAAQyB,IAAIC,SAE/B,yBAAKtC,UAAU,QA7ChB,IAAIuC,KAAKC,eAAe,QAAS,CAC1CC,QAAS,OACTC,KAAM,UACNC,MAAO,OACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,YACPC,WAwCO,yBAAK/C,UAAU,eACb,yBAAKA,UAAU,QAAf,IAAwB4B,KAAKC,MAAMjB,EAAQkB,KAAKC,MAAhD,SACA,yBAAK/B,UAAU,uBACZY,EAAQA,QAAQ,GAAGkB,QAK1B,yBAAK9B,UAAU,iBACb,8D,k0BC5Ed,IAAMgD,E,MAASC,EAAOC,IAAV,KA2EGC,EA5BO,WACpB,OACE,kBAACH,EAAD,KACE,kBAACI,EAAA,EAAD,CAAQC,OAAO,KAAKC,MAAM,OACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,MAAnB,SACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBpE,GAAG,yBAClB,kBAACqE,EAAA,EAAD,CAAK5D,UAAU,WACb,kBAAC4D,EAAA,EAAIC,KAAL,CAAUL,KAAK,MAAf,QACA,kBAACI,EAAA,EAAIC,KAAL,CAAUL,KAAK,WAAf,SACA,kBAACM,EAAA,EAAD,CAAaC,MAAM,OAAOxE,GAAG,sBAC3B,kBAACuE,EAAA,EAAYE,KAAb,CAAkBR,KAAK,UAAvB,QACA,kBAACM,EAAA,EAAYE,KAAb,CAAkBR,KAAK,aAAvB,WACA,kBAACM,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CACEpE,OAAO,SACPsE,IAAI,sBACJV,KAAK,2CAHP,kBClCCW,G,MAlBH,WACV,OACE,kBAAC,IAAD,KACE,yBAAKnE,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoE,OAAK,EAACC,KAAK,IAAIC,UAAWjE,IACjC,kBAAC,IAAD,CAAOgE,KAAK,SAASC,UAAWrG,IAChC,kBAAC,IAAD,CAAOoG,KAAK,QAAQC,UAAW7D,IAC/B,kBAAC,IAAD,CAAO4D,KAAK,WAAWC,UAAWtC,UCZ1BuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1G,MAAK,SAAA2G,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzF,QAAQyF,MAAMA,EAAMC,c","file":"static/js/main.d0fbe03e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bikemobile.57c87a94.jpg\";","import React, { useEffect, useState } from 'react'\n\nexport const Bikes = () => {\n  const [bike, setBike] = useState([])\n  const [newFilter, setNewFilter] = useState('')\n\n  useEffect(() => {\n    fetch('https://api.citybik.es/v2/networks/citybikes-helsinki')\n      .then((res) => res.json())\n      .then((res) => setBike(res.network.stations))\n  }, [])\n\n  // Mapping through the bikelist got from the API and printing them correctly\n  const BikeItem = ({ bikes }) => {\n    const mapBikes = () =>\n      bikes\n        .filter((bikeName) =>\n          bikeName.name.toLowerCase().includes(newFilter.toLowerCase())\n        )\n        .map((bike) => (\n          <tr key={bike.id}>\n            <td>{bike.name}</td>\n            <td>{bike.free_bikes}</td>\n            <td>{bike.empty_slots}</td>\n          </tr>\n        ))\n    return <tbody>{mapBikes()}</tbody>\n  }\n\n  // Handle user input in search field\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n    console.log(event.target.value)\n  }\n\n  return (\n      <div className=\"pages\">\n        <h1>Helsinki Citybike Webpage</h1>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={handleFilterChange}\n            value={newFilter}\n            onKeyPress={handleFilterChange}\n          />\n        </div>\n        <table className=\"tables\">\n          <thead>\n            <tr>\n              <th>Bike station: </th>\n              <th>Bikes available: </th>\n              <th>Empty slots left: </th>\n            </tr>\n          </thead>\n          <BikeItem bikes={bike} />\n        </table>\n      </div>\n  )\n}\n","import React from 'react'\nimport bike from '../assets/bikemobile.jpg'\n\nexport const Home = () => {\n  return (\n    <div className=\"pages\">\n      <h1>Alepafillari Info</h1>\n      <img className=\"assetsImage\" alt=\"Welcoming page\" src={bike}></img>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { Map, Marker, Popup, TileLayer } from 'react-leaflet'\n\nconst api = {\n  key: 'b8b339cb458fb8bc4985ef3cc4e552a3',\n  base: 'https://api.openweathermap.org/data/2.5/',\n}\n\nexport const Mapper = () => {\n  const [bike, setBike] = useState([])\n  const [activeBike, setActiveBike] = useState(null)\n\n  const [weather, setWeather] = useState({})\n\n  useEffect(() => {\n    fetch('https://api.citybik.es/v2/networks/citybikes-helsinki')\n      .then((res) => res.json())\n      .then((res) => setBike(res.network.stations))\n  }, [])\n\n  useEffect(() => {\n    fetch(`${api.base}weather?q=helsinki&units=metric&APPID=${api.key}`)\n      .then((res) => res.json())\n      .then((res) => setWeather(res))\n  }, [])\n\n  return (\n    <div className=\"pages\">\n      <div className=\"map-container\">\n        <Map center={[60.1733244, 24.9410248]} zoom={13}>\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          />\n          {bike.map((stop) => (\n            <Marker\n              key={stop.id}\n              position={[stop.latitude, stop.longitude]}\n              onclick={() => {\n                setActiveBike(stop)\n              }}\n            />\n          ))}\n\n          {activeBike && (\n            <Popup\n              key={activeBike.id}\n              position={[activeBike.latitude, activeBike.longitude]}\n              onClose={() => {\n                setActiveBike(null)\n              }}\n            >\n              <div>\n                <h3>{activeBike.name}</h3>\n                <p>Bikes available: {activeBike.free_bikes}</p>\n                <p>Empty slots left: {activeBike.empty_slots}</p>\n                <div>\n                  <p className=\"temp\">\n                    Weather: {Math.round(weather.main.temp)}Â°C{' '}\n                    {weather.weather[0].main}\n                  </p>\n                </div>\n              </div>\n            </Popup>\n          )}\n        </Map>\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\n\nconst api = {\n  key: 'b8b339cb458fb8bc4985ef3cc4e552a3',\n  base: 'https://api.openweathermap.org/data/2.5/',\n}\n\nexport const Weather = () => {\n  const [query, setQuery] = useState('')\n  const [weather, setWeather] = useState({})\n\n  const search = (evt) => {\n    if (evt.key === 'Enter') {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result)\n          setQuery('')\n          console.log(result)\n        })\n    }\n  }\n\n  // Formating date\n  const dateFormat = () => {\n    let date = new Intl.DateTimeFormat('en-GB', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: '2-digit',\n      hour: 'numeric',\n      minute: 'numeric',\n    }).format()\n    return date\n  }\n\n  // Handle user input in search field\n  const handleFilterChange = (event) => {\n    setQuery(event.target.value)\n    console.log(event.target.value)\n  }\n\n  return (\n    <div className=\"pages\">\n      <div\n        className={\n          typeof weather.main != 'undefined'\n            ? weather.main.temp > 16\n              ? 'weather warm'\n              : 'weather cold'\n            : 'weather'\n        }\n      >\n        <main>\n          <div className=\"search-box\">\n            <input\n              type=\"text\"\n              className=\"search-bar\"\n              placeholder=\"Search...\"\n              onChange={handleFilterChange}\n              value={query}\n              onKeyPress={search}\n            />\n          </div>\n          {typeof weather.main != 'undefined' ? (\n            <div>\n              <div className=\"location-box\">\n                <div className=\"location\">\n                  {weather.name}, {weather.sys.country}\n                </div>\n                <div className=\"date\">{dateFormat()}</div>\n              </div>\n              <div className=\"weather-box\">\n                <div className=\"temp\"> {Math.round(weather.main.temp)}Â°c</div>\n                <div className=\"weather-description\">\n                  {weather.weather[0].main}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"weather-empty\">\n              <p>Search for Weather by City</p>\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  )\n}\n\nexport default Weather\n","import React from 'react'\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap'\n\nimport styled from 'styled-components'\n\nconst Styles = styled.div`\n  form {\n    width: auto;\n  }\n  button {\n    margin: 1vh;\n  }\n  .navbar {\n    background-color: rgba(0,0,0,0.8);\n  }\n  .navbar-default,\n  .collapsed {\n    border-color: white;\n    background-color: white;\n  }\n  .navbar-default,\n  .toggle {\n    background-color: white;\n  }\n  .navbar-brand,\n  .navbar-nav .nav-link {\n    color: white;\n    margin: 2vh 2vw 2vh 2vw;\n    &:hover {\n      color: #690505;\n    }\n  }\n  .navbar-light .navbar-nav .nav-link {\n    color: white;\n    &:hover {\n      color: #690505;\n    }\n  }\n  .navbar-light .navbar-brand {\n    color: white;\n    &:hover {\n      color: #690505;\n    }\n  }\n  .dropdown {\n    color: black;\n    &:hover {\n      color: #690505;\n    }\n  }\n`\n\nconst NavigationBar = () => {\n  return (\n    <Styles>\n      <Navbar expand=\"lg\" fixed=\"top\">\n        <Navbar.Brand href=\"#/\">Bikes</Navbar.Brand>\n        <Navbar.Toggle area-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            <Nav.Link href=\"#/\">Home</Nav.Link>\n            <Nav.Link href=\"#/bikes\">Bikes</Nav.Link>\n            <NavDropdown title=\"More\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#/maps\">Maps</NavDropdown.Item>\n              <NavDropdown.Item href=\"#/weather\">Weather</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=\"https://benjambo.github.io/portfolio/#/\"\n              >\n                Benjambo\n              </NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </Styles>\n  )\n}\nexport default NavigationBar\n","import React from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport './App.css'\n\n// Pages\nimport { Bikes } from './pages/bikes'\nimport { Home } from './pages/home'\nimport { Mapper } from './pages/map'\nimport { Weather } from './pages/weather'\n\n// Components\nimport NavigationBar from './components/NavigationBar'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nconst App = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavigationBar />\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/bikes\" component={Bikes} />\n            <Route path=\"/maps\" component={Mapper} />\n            <Route path=\"/weather\" component={Weather} />\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}